apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "artifactory.fullname" . }}
  labels:
    app: {{ template "artifactory.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.artifactory.name }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.artifactory.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "artifactory.name" . }}
        component: "{{ .Values.artifactory.name }}"
        release: {{ .Release.Name }}
    spec:
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
    {{- end }}
      initContainers:
      - name: "remove-lost-found"
        image: "{{ .Values.initContainerImage }}"
        imagePullPolicy: {{ .Values.artifactory.image.pullPolicy }}
        command:
        - 'sh'
        - '-c'
        - 'rm -rfv {{ .Values.artifactory.persistence.mountPath }}/lost+found'
        volumeMounts:
        - mountPath: {{ .Values.artifactory.persistence.mountPath | quote }}
          name: artifactory-volume
      - name: "wait-for-db"
        image: "{{ .Values.initContainerImage }}"
        command:
        - 'sh'
        - '-c'
        - 'until nc -z -w 2 {{ .Release.Name }}-postgresql {{ .Values.postgresql.service.port }} && echo database ok; do sleep 2; done'
      containers:
      - name: {{ .Values.artifactory.name }}
        image: "{{ .Values.artifactory.image.repository }}:{{ .Values.artifactory.image.version }}"
        imagePullPolicy: {{ .Values.artifactory.image.pullPolicy }}
        command:
        - '/bin/bash'
        - '-c'
        - |
          rm -rf /opt/jfrog/artifactory/etc 
          mkdir -p /opt/jfrog/artifactory/etc
          echo $LICENSE_KEY >> /opt/jfrog/artifactory/etc/artifactory.lic
          /entrypoint-artifactory.sh
        env:
        - name: DB_TYPE
          value: 'postgresql'
        - name: DB_USER
          value: {{.Values.postgresql.postgresUser | quote }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-postgresql
              key: postgres-password
        - name: CCE_TEST 
          valueFrom:
            secretKeyRef:
              name: cce-test 
              key: a 
        - name: DB_HOST
          value: {{ .Release.Name }}-postgresql
        - name: NEW_INIT_PASSWORD
          value: {{ .Values.artifactory.newInitPassword | quote }}
        - name: LICENSE_KEY 
          value: {{ .Values.artifactory.licenses | quote }}
        - name: DEFAULT_REPOSITORY_KEY 
          value: {{ .Values.artifactory.repositoryKey | quote }}
        - name: DEFAULT_REPOSITORY_CLASS 
          value: {{ .Values.artifactory.repositoryClass | quote }}
        - name: DEFAULT_REPOSITORY_TYPE
          value: {{ .Values.artifactory.repositoryType | quote }}
        - name: DEFAULT_REPOSITORY_LAYOUT
          value: {{ .Values.artifactory.repositoryLayout | quote }}
        - name: DOCKER_REVERSE_PROXY_METHOD 
          value: {{ .Values.artifactory.dockerReverseProxyMethod | quote }}
        - name: NODE_IP 
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: NODE_PORT
          value: {{ .Values.artifactory.service.nodePort | quote }}
        - name: EXTRA_JAVA_OPTIONS
          value: "
      {{- if .Values.artifactory.javaOpts.other }}
          {{ .Values.artifactory.javaOpts.other }}
      {{- end}}
      {{- if .Values.artifactory.javaOpts.xms }}
          -Xms{{ .Values.artifactory.javaOpts.xms }}
      {{- end}}
      {{- if .Values.artifactory.javaOpts.xmx }}
          -Xmx{{ .Values.artifactory.javaOpts.xmx }}
      {{- end}}
            "
        ports:
        - containerPort: {{ .Values.artifactory.internalPort }}
        volumeMounts:
        - name: artifactory-volume
          mountPath: {{ .Values.artifactory.persistence.mountPath | quote }}
        - name: configmap-hooks
          mountPath: /ready_probe.sh
          subPath: ready_probe.sh
        resources:
{{ toYaml .Values.artifactory.resources | indent 10 }}
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - /ready_probe.sh
        livenessProbe:
          httpGet:
            path: '/artifactory/webapp/#/login'
            port: 8081
          initialDelaySeconds: 180
          periodSeconds: 10
      volumes:
      - name: configmap-hooks
        configMap:
          name: {{ template "artifactory.fullname" . }}
          defaultMode: 0777
      - name: artifactory-volume
      {{- if .Values.artifactory.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.artifactory.persistence.existingClaim | default (include "artifactory.fullname" .) }}
      {{- else }}
        emptyDir: {}
      {{- end -}}
